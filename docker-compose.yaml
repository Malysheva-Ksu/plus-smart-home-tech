services:
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092'
      KAFKA_LISTENERS: 'PLAINTEXT_INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093,PLAINTEXT://0.0.0.0:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      CLUSTER_ID: 'K0EA9p0yEe6MkAAAAkKsEg'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "-b", "localhost:29092", "1", "60"] # Изменено на localhost:29092 и увеличен таймаут
      interval: 10s
      timeout: 60s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
    networks:
      - telemetry-net

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-init-topics
    depends_on:
      - kafka
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
    command: >
      bash -c "
        /wait-for-it.sh kafka 29092 -- echo 'Kafka is ready!' &&
        kafka-topics --create --topic telemetry.sensors.v1 --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 &&
        kafka-topics --create --topic telemetry.hubs.v1 --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 &&
        echo 'Topics created.'
      "
    networks:
      - telemetry-net

  collector-service:
    build:
      context: .
      dockerfile: telemetry/Dockerfile
    container_name: collector-service
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - schema-registry
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    command: >
      sh -c "/wait-for-it.sh schema-registry 8081 -- 
             java 
             -Dspring.kafka.bootstrap-servers=$${KAFKA_BOOTSTRAP_SERVERS} 
             -Dspring.kafka.properties.schema.registry.url=$${KAFKA_SCHEMA_REGISTRY_URL} 
             -jar app.jar"
    networks:
      - telemetry-net

networks:
  telemetry-net:
    driver: bridge