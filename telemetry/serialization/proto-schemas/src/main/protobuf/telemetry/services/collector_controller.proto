syntax = "proto3";
import "telemetry/messages/device_added_event.proto";
import "telemetry/messages/device_removed_event.proto";
import "telemetry/messages/scenario_added_event.proto";
import "telemetry/messages/scenario_removed_event.proto";
import "telemetry/messages/light_sensor_event.proto";
import "telemetry/messages/temperature_sensor_event.proto";
import "telemetry/messages/switch_sensor_event.proto";
import "telemetry/messages/climate_sensor_event.proto";
import "telemetry/messages/motion_sensor_event.proto";


package telemetry.service.controller;

option java_package = "ru.yandex.practicum.grpc.telemetry.controller";
option java_outer_classname = "CollectorProto";

message HubEventRequest {
  oneof event {
    telemetry.message.event.DeviceAddedEventProto deviceAddedEvent = 1;
    telemetry.message.event.DeviceRemovedEventProto deviceRemovedEvent = 2;
    telemetry.message.event.ScenarioAddedEventProto scenarioAddedEvent = 3;
    telemetry.message.event.ScenarioRemovedEventProto scenarioRemovedEvent = 4;
  }
}

message SensorEventRequest {
  oneof event {
    telemetry.message.event.LightSensorEvent lightSensorEvent = 1;
    telemetry.message.event.TemperatureSensorEvent temperatureSensorEvent = 2;
    telemetry.message.event.SwitchSensorEvent smartSwitchEvent = 3;
    telemetry.message.event.ClimateSensorEvent climateSensorEvent = 4;
    telemetry.message.event.MotionSensorEvent motionSensorEvent = 5;
  }
}

message ReceiveResponse {
  bool success = 1;
  string message = 2;
}

service CollectorService {
  rpc ReceiveHubEvent (HubEventRequest) returns (ReceiveResponse);
  rpc ReceiveSensorData (SensorEventRequest) returns (ReceiveResponse);
}